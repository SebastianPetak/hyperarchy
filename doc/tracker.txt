* rankings are persisted across page refreshes
cancel event handlers when relations on a list change
make elections bookmarkable and test the result of their selection (assigning to candidates / rankings views)
add belongsTo, which defines reader method, plus writer method that sets the foreign key, convert id updates to use it when appropriate
add context parameter to futures / subscription nodes
add a __ builder object which builds views with a single top-level method call __.li({candidateId: "foo"});
replace _.defer in initialize with onDomAttach hook
add _ to the closure surrounding every monarch file
attempt to convert comet hub to use the cramp library
convert screw unit to use underscore.js _.isEqual for equal matcher?
secure the ranking api against unauthorized writes
refactor client side list code into a single generic widget 
add super to module system
turn module system into an underscore.js plugin and release it
make relations work with beEmpty matcher, possibly by tying into or creating some general underscore facility for determining emptyness
rename table.globalName to name

deferred issues / open questions
---------------
checking for the existence of the session every single request? shouldn't that at least cache it in the identity map?
should exposed repository be in the http package, so nothing in model is dependent on http?
what to do if creating an object fails with an error? call error callback? should the element be in the local repository